# Generated from funx.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2!")
        buf.write("\u00b2\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \3\2\3\2\3\2\3\3\3\3\3\3\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\7\3\7\3")
        buf.write("\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3")
        buf.write("\r\3\r\3\r\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3\20")
        buf.write("\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\23\3\23")
        buf.write("\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30")
        buf.write("\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\7\34\u008f")
        buf.write("\n\34\f\34\16\34\u0092\13\34\3\35\6\35\u0095\n\35\r\35")
        buf.write("\16\35\u0096\3\36\3\36\7\36\u009b\n\36\f\36\16\36\u009e")
        buf.write("\13\36\3\37\3\37\7\37\u00a2\n\37\f\37\16\37\u00a5\13\37")
        buf.write("\3\37\5\37\u00a8\n\37\3\37\3\37\3 \6 \u00ad\n \r \16 ")
        buf.write("\u00ae\3 \3 \2\2!\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23")
        buf.write("\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25")
        buf.write(")\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!\3")
        buf.write("\2\b\3\2c|\5\2\62;C\\c|\3\2\62;\3\2C\\\3\2\f\f\4\2\f\f")
        buf.write("\"\"\2\u00b7\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3")
        buf.write("\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2")
        buf.write("\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2")
        buf.write("\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2")
        buf.write("#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2")
        buf.write("\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65")
        buf.write("\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2")
        buf.write("\2?\3\2\2\2\3A\3\2\2\2\5D\3\2\2\2\7G\3\2\2\2\tL\3\2\2")
        buf.write("\2\13R\3\2\2\2\rT\3\2\2\2\17V\3\2\2\2\21Y\3\2\2\2\23\\")
        buf.write("\3\2\2\2\25^\3\2\2\2\27`\3\2\2\2\31c\3\2\2\2\33f\3\2\2")
        buf.write("\2\35j\3\2\2\2\37m\3\2\2\2!q\3\2\2\2#t\3\2\2\2%x\3\2\2")
        buf.write("\2\'|\3\2\2\2)~\3\2\2\2+\u0080\3\2\2\2-\u0082\3\2\2\2")
        buf.write("/\u0084\3\2\2\2\61\u0086\3\2\2\2\63\u0088\3\2\2\2\65\u008a")
        buf.write("\3\2\2\2\67\u008c\3\2\2\29\u0094\3\2\2\2;\u0098\3\2\2")
        buf.write("\2=\u009f\3\2\2\2?\u00ac\3\2\2\2AB\7>\2\2BC\7/\2\2C\4")
        buf.write("\3\2\2\2DE\7k\2\2EF\7h\2\2F\6\3\2\2\2GH\7g\2\2HI\7n\2")
        buf.write("\2IJ\7u\2\2JK\7g\2\2K\b\3\2\2\2LM\7y\2\2MN\7j\2\2NO\7")
        buf.write("k\2\2OP\7n\2\2PQ\7g\2\2Q\n\3\2\2\2RS\7*\2\2S\f\3\2\2\2")
        buf.write("TU\7+\2\2U\16\3\2\2\2VW\7?\2\2WX\7?\2\2X\20\3\2\2\2YZ")
        buf.write("\7#\2\2Z[\7?\2\2[\22\3\2\2\2\\]\7>\2\2]\24\3\2\2\2^_\7")
        buf.write("@\2\2_\26\3\2\2\2`a\7>\2\2ab\7?\2\2b\30\3\2\2\2cd\7@\2")
        buf.write("\2de\7?\2\2e\32\3\2\2\2fg\7c\2\2gh\7p\2\2hi\7f\2\2i\34")
        buf.write("\3\2\2\2jk\7q\2\2kl\7t\2\2l\36\3\2\2\2mn\7z\2\2no\7q\2")
        buf.write("\2op\7t\2\2p \3\2\2\2qr\7/\2\2rs\7@\2\2s\"\3\2\2\2tu\7")
        buf.write(">\2\2uv\7/\2\2vw\7@\2\2w$\3\2\2\2xy\7p\2\2yz\7q\2\2z{")
        buf.write("\7v\2\2{&\3\2\2\2|}\7}\2\2}(\3\2\2\2~\177\7\177\2\2\177")
        buf.write("*\3\2\2\2\u0080\u0081\7`\2\2\u0081,\3\2\2\2\u0082\u0083")
        buf.write("\7,\2\2\u0083.\3\2\2\2\u0084\u0085\7\61\2\2\u0085\60\3")
        buf.write("\2\2\2\u0086\u0087\7\'\2\2\u0087\62\3\2\2\2\u0088\u0089")
        buf.write("\7-\2\2\u0089\64\3\2\2\2\u008a\u008b\7/\2\2\u008b\66\3")
        buf.write("\2\2\2\u008c\u0090\t\2\2\2\u008d\u008f\t\3\2\2\u008e\u008d")
        buf.write("\3\2\2\2\u008f\u0092\3\2\2\2\u0090\u008e\3\2\2\2\u0090")
        buf.write("\u0091\3\2\2\2\u00918\3\2\2\2\u0092\u0090\3\2\2\2\u0093")
        buf.write("\u0095\t\4\2\2\u0094\u0093\3\2\2\2\u0095\u0096\3\2\2\2")
        buf.write("\u0096\u0094\3\2\2\2\u0096\u0097\3\2\2\2\u0097:\3\2\2")
        buf.write("\2\u0098\u009c\t\5\2\2\u0099\u009b\t\3\2\2\u009a\u0099")
        buf.write("\3\2\2\2\u009b\u009e\3\2\2\2\u009c\u009a\3\2\2\2\u009c")
        buf.write("\u009d\3\2\2\2\u009d<\3\2\2\2\u009e\u009c\3\2\2\2\u009f")
        buf.write("\u00a3\7%\2\2\u00a0\u00a2\n\6\2\2\u00a1\u00a0\3\2\2\2")
        buf.write("\u00a2\u00a5\3\2\2\2\u00a3\u00a1\3\2\2\2\u00a3\u00a4\3")
        buf.write("\2\2\2\u00a4\u00a7\3\2\2\2\u00a5\u00a3\3\2\2\2\u00a6\u00a8")
        buf.write("\t\6\2\2\u00a7\u00a6\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8")
        buf.write("\u00a9\3\2\2\2\u00a9\u00aa\b\37\2\2\u00aa>\3\2\2\2\u00ab")
        buf.write("\u00ad\t\7\2\2\u00ac\u00ab\3\2\2\2\u00ad\u00ae\3\2\2\2")
        buf.write("\u00ae\u00ac\3\2\2\2\u00ae\u00af\3\2\2\2\u00af\u00b0\3")
        buf.write("\2\2\2\u00b0\u00b1\b \2\2\u00b1@\3\2\2\2\t\2\u0090\u0096")
        buf.write("\u009c\u00a3\u00a7\u00ae\3\b\2\2")
        return buf.getvalue()


class funxLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    ID = 27
    NUM = 28
    FUNCID = 29
    COMENT = 30
    WS = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<-'", "'if'", "'else'", "'while'", "'('", "')'", "'=='", "'!='", 
            "'<'", "'>'", "'<='", "'>='", "'and'", "'or'", "'xor'", "'->'", 
            "'<->'", "'not'", "'{'", "'}'", "'^'", "'*'", "'/'", "'%'", 
            "'+'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUM", "FUNCID", "COMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "ID", "NUM", "FUNCID", "COMENT", "WS" ]

    grammarFileName = "funx.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


